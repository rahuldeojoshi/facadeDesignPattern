<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="findbugs" name="facadeDesignPattern">
	<property environment="env" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.8" />
	<property name="source" value="1.8" />
	<property name="ant" value="${env.ANT_HOME}" />
	<property name="jacoco.home" value="${env.JACOCO_HOME}">
	</property>
	<property name="findbugs.home.dir" value="${env.FINDBUGS_HOME}" />
	<property name="pmd.home.dir" value="${env.PMD_HOME}" />
	<property name="report.dir" location="${basedir}/report" />
	<property name="report.pmd.dir" value="${report.dir}/pmd" />
	<property name="report.findbugs.dir" value="${report.dir}/findbugs" />
	<property name="result.exec.file" location="${report.dir}/jacoco.exec" />
	<property name="junit.output.dir" value="${basedir}/junit" />
	<property name="result.report.dir" value="${report.dir}/site/jacoco">
	</property>

	<get src="http://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar" dest="${ant}/lib/junit.jar" />
	<get src="http://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar" dest="${ant}/lib/hamcrest-core.jar" />
	<path id="JUnit 4.libraryclasspath">
		<pathelement location="${ant}/lib/junit.jar" />
		<pathelement location="${ant}/lib/hamcrest-core.jar" />
	</path>

	<path id="facadeDesignPattern.classpath">
		<pathelement location="bin" />
		<path refid="JUnit 4.libraryclasspath" />
	</path>
	<target name="init">
		<mkdir dir="bin" />
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="src">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="test">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	<target name="clean">
		<delete dir="bin" />
		<delete dir="${junit.output.dir}" />
		<delete dir="${report.dir}" />
		<delete file="${result.exec.file}" />
	</target>
	<target depends="init" name="build">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
			<src path="src" />
			<src path="test" />
			<classpath refid="facadeDesignPattern.classpath" />
		</javac>
	</target>
	<target name="CdTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.CdTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="ChownTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.ChownTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
			
		</junit>
	</target>
	<target name="ClientMain">
		<java classname="facade.ClientMain" failonerror="true" fork="yes">
			<classpath refid="facadeDesignPattern.classpath" />
		</java>
	</target>
	<target name="Directorytest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.DirectoryTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
			
		</junit>
	</target>
	<target name="DirTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.DirTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
			
		</junit>
	</target>
	<target name="FileSystemTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.FileSystemTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
			
		</junit>
	</target>
	<target name="FileTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.FileTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="FSElementTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.FSElementTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="HistoryTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.HistoryTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="LinkTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.LinkTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="LnTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.LnTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="LsTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.LsTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="MkdirTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.MkdirTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="PwdTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.PwdTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="RmdirTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.RmdirTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="SortTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.SortTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="TouchTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="src.TouchTest" todir="${junit.output.dir}" />
			<classpath refid="facadeDesignPattern.classpath" />
		</junit>
	</target>
	<target name="TestCommand">
		<java classname="command.TestCommand" failonerror="true" fork="yes">
			<classpath refid="facadeDesignPattern.classpath" />
		</java>
	</target>
	<target name="junitreport">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.output.dir}" />
		</junitreport>
	</target>

	<!-- Setup FindBugs according to the instructions on official website -->
	<target name="findbugs" depends="clean, build, SortTest, PwdTest, MkdirTest, RmdirTest, LsTest, LnTest, CdTest, DirTest, HistoryTest, ChownTest, TouchTest, Directorytest, FileSystemTest, FileTest, LinkTest, FSElementTest, ClientMain" description="Run code analysis over code to check for problems.">

		<!-- Fail this target if FindBugs is not installed. -->
		<available file="${findbugs.home.dir}/lib/findbugs.jar" property="findbugs.available" />
		<fail unless="findbugs.available" message="Error: FINDBUGS_HOME not set or findbugs.jar not found." />
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.home.dir}/lib/findbugs-ant.jar" />
		<!-- Run FindBugs -->
		<mkdir dir="${report.findbugs.dir}" />
		<findbugs home="${findbugs.home.dir}" workHard="true" output="html" outputFile="${report.findbugs.dir}/findbugs.html">
			<class location="${basedir}/bin" />

			<!-- Use the Proper Classpath -->
			<auxclasspath refid="facadeDesignPattern.classpath" />
		</findbugs>
	</target>
	<!-- Setup PMD according to the instructions on official website and using code snippet from the website  -->
	<path id="pmd2.classpath">
		<pathelement location="${build}" />
		<fileset dir="${pmd.home.dir}/lib/">
			<include name="*.jar" />
		</fileset>
	</path>
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd2.classpath" />
	<target name="pmd">
		<mkdir dir="${report.pmd.dir}" />
		<pmd rulesetfiles="rulesets/favorites.xml">
			<formatter type="xml" toFile="${report.pmd.dir}/pmd_report.xml" />
			<fileset dir="${basedir}/src">
				<include name="**/*.java" />
			</fileset>
		</pmd>
		<xslt in="${report.pmd.dir}/pmd_report.xml" style="${pmd.home.dir}/etc/xslt/pmd-report-per-class.xslt" out="${report.pmd.dir}/pmd_report.html" />
	</target>
</project>
